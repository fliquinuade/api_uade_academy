"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from dotenv import load_dotenv
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

#Cargo las variables de entorno desde el ".env"
load_dotenv(os.path.join(BASE_DIR,'.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False") == 'True'
ENV = os.getenv("ENV","development")

#IP o dominio desde donde vamos a servir nuestra aplicacion
#Cuando DEBUG=False es obligatorio completarlo
#ALLOWED_HOSTS = ["midominio.com","127.0.0.1"]
#Armar una lista en base al string leido del .env, separado por ","
ALLOWED_HOST = os.getenv("ALLOWED_HOST","").split(",")

MY_CODE='un-secreto-mio'

# CORS_ALLOWED_ORIGINS = [
#     "http://127.0.0.1:5500",
#     "http://127.0.0.1:5501",
#     "http://localhost:5173",
# ]
CORS_ALLOWED_ORIGINS = os.getenv("CORS_ALLOWED_ORIGINS","").split(",")

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',    
    'drf_yasg',
    "corsheaders",
    'rest_framework',
    'rest_framework_simplejwt',
    'api' #Registrar la aplicacion creada
]

AUTH_USER_MODEL = 'api.CustomUser'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #Registrando mis middleware personalizados
    'middlewares.simple_middleware.SimpleLoggingMiddleware'
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD':os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT')
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es-ar'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#DJANGO REST FRAMEWORK
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES':[
        'rest_framework.authentication.SessionAuthentication',
        #'rest_framework.authentication.BasicAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication'
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        #Restrección para acceder a los endpoint 
        #'rest_framework.permissions.IsAuthenticated',
        #Hace publicos todos los endpoints por defecto
        'rest_framework.permissions.AllowAny',
    ],
     'DEFAULT_THROTTLE_CLASSES': [
        # AnnonRateThrottle es una clase de limitación de velocidad para usuarios anónimos
        'rest_framework.throttling.AnonRateThrottle' ,
        # UserRateThrottle es una clase de limitación de velocidad para usuarios autenticados
        'rest_framework.throttling.UserRateThrottle' ,
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '2/minute',   # usuarios anónimos: 10 solicitudes por minuto
        'user': '5/minute',    # usuarios autenticados: 100 por hora
    }

}

#CONFIGURACION JWT-TOKEN
from datetime import timedelta

SIMPLE_JWT = {
    #TOKEN DURE 30 minutos
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=1), #'00:30:00
}

#CONFIGURACION DE SWAGGER
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer' :{
            'type':'apiKey',
            'description': 'Autenticación por medio de JWT. Ingresear "Bearer <TOKEN>"',
            'name': 'Authorization',
            'in':'header'
        }
    },
    'USE_SESSION_AUTH':False, #Evitar autenticación por basic y por session.
}


####### CONFIGURACION DE LOGGING
#Indico directorio de logs
LOG_DIR = BASE_DIR.parent / 'logs'
#En caso de que no exista lo crea
LOG_DIR.mkdir(exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # Permite usar los loggers de Django
    'formatters':{
        'simple': {'format':"[%(levelname)s] %(name)s: %(message)s"},
        'avanzado': {'format':"[%(levelname)s] %(asctime)s - %(name)s: %(message)s"},
        # "json": {
        #     "()" : "pythonjsonlogger.jsonlogger.JsonFormatter",
        #     "fmt": "%(asctime)s %(levelname)s %(name)s %(message)s "
        #            "%(pathname)s:%(lineno)d %(process)d %(threadName)s"
        # },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',  # muestra los logs en la consola
            'formatter':'simple'
        },
        'file': {
            'class': 'logging.FileHandler', #guardar los logs en archivos
            #'filename': os.path.join(BASE_DIR, 'aude_academy_debug.log'),  # guarda en un archivo
            'filename': LOG_DIR / 'aude_academy_debug.log',
            'formatter':'avanzado'
        },
        'file_db':{
            'class':'logging.FileHandler',
            #'filename': os.path.join(BASE_DIR, 'aude_academy_log_db.log'),  # guarda en un archivo
            'filename': LOG_DIR / 'db_debug.log',
            'formatter':'avanzado'
        }
    },
    'loggers': {
        'api_uade': {
            'handlers': ['console', 'file'],
            'level': 'INFO',  # nivel mínimo a registrar
            'propagate': True,
        },
        #Logger por defecto de django que registra todo lo que pasa en la app
        'django':{
            'handlers':['console','file'],
            'level': 'WARNING',
        },
        #Logger por defecto de django para guardar trazabilidad de base de datos
        'django.db.backends':{
            'handlers':['file_db'],
            'level':'DEBUG',
            'propagate': True
        }
    },
}